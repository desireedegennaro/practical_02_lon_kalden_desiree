DS 4300 - Amazon EC2 & Lambda
Instructor: Mark Fontenot, PhD
Institution: Northeastern University
Based on: Data Engineering with AWS by Gareth Eagar

Amazon EC2 (Elastic Cloud Compute)
Overview
Scalable virtual computing in the cloud

Wide variety of instance types available

Pay-as-you-go pricing model

Supports multiple operating systems

Key Features
Elasticity – Scale instances up/down programmatically

AMIs (Amazon Machine Images) – Use standard AMIs or create custom ones

Integration – Works with S3, RDS, and other AWS services

EC2 Lifecycle
Launch – Start an instance with a specific configuration

Start/Stop – Pause without deleting

Terminate – Permanently delete

Reboot – Restart without losing root volume data

Storage Options
Instance Store – Temporary, high-speed storage tied to the instance lifecycle

EFS (Elastic File System) – Shared file storage

EBS (Elastic Block Storage) – Persistent block-level storage

S3 – Large data set storage and EC2 backups

Common EC2 Use Cases
Web Hosting – Run websites and web apps

Data Processing – Perform computations

Machine Learning – Train models with GPU instances

Disaster Recovery – Backup critical workloads

Setting Up an EC2 Instance
Launch an EC2 instance

Connect via SSH

Install necessary packages

Ubuntu VM Commands
Default user: ubuntu

Superuser commands: sudo

Package manager: apt

Update system:

sh
Copy
Edit
sudo apt update; sudo apt upgrade
Installing MiniConda on EC2
sh
Copy
Edit
curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
bash ./Miniconda3-latest-Linux-x86_64.sh
Installing & Using Streamlit
Log out and log back in

Verify pip:

sh
Copy
Edit
pip --version
Install dependencies:

sh
Copy
Edit
pip install streamlit scikit-learn
Create a project folder:

sh
Copy
Edit
mkdir web && cd web
Create a Streamlit app (test.py):

python
Copy
Edit
import streamlit as st

def main():
    st.title("Welcome to my Streamlit App")
    st.write("## Data Sets")
    st.write("""
        - data set 01
        - data set 02
        - data set 03
    """)
    st.write("\n")
    st.write("## Goodbye!")

if __name__ == "__main__":
    main()
Run the app:

sh
Copy
Edit
streamlit run test.py
AWS Lambda
Overview
Serverless computing – Runs code in response to events

No server management – Only focus on code

Cost-efficient – Pay only for execution time

Lambda Features
Event-driven execution – Triggered by AWS events

Supports multiple runtimes – Python, Java, Node.js, etc.

Highly integrated – Works with many AWS services

Scalable – Adjusts dynamically to demand

How It Works
Upload code via AWS Management Console

Configure event sources

Execute when an event occurs

Creating a Lambda Function
Define the function

Edit and deploy code

Test execution
