Redis-py
Redis-py:


Standard Python client for Redis, maintained by the Redis company.


GitHub Repo: redis/redis-py


Installation in your 4300 Conda environment: pip install redis


Value types supported: String, Number, JSON Object, Binary Object, etc.



Connecting to the Server
Connection Setup:


Host: localhost or 127.0.0.1 (for Docker deployment).


Port: Typically the default Redis port 6379 (or mapped port in Docker).


db: Select the database (0-15).


decode_responses=True: Ensures server response is decoded to strings (not bytes).


Example:

 python
Copy
import redis
redis_client = redis.Redis(host='localhost', 
                            port=6379, 
                            db=2, 
                            decode_responses=True)



Redis Command List
Full Command List: Available in the Redis-py documentation.


Use the filter to get commands for specific data structures (e.g., list, hash, set).


Documentation is not exhaustive in the slides, only highlights are covered.



String Commands
Basic Commands:


r.set('clickCount:/abc', 0) - Set key-value pair.


val = r.get('clickCount:/abc') - Retrieve value.


r.incr('clickCount:/abc') - Increment value.


Print result:

 python
Copy
print(f'click count = {ret_val}')


Example:

 python
Copy
redis_client.mset({'key1': 'val1', 'key2': 'val2', 'key3': 'val3'})
print(redis_client.mget('key1', 'key2', 'key3'))
# Output: ['val1', 'val2', 'val3']



String Commands - 2
Common commands include:


set(), mset(), setex(), msetnx(), setnx()


get(), mget(), getex(), getdel()


incr(), decr(), incrby(), decrby()


strlen(), append()



List Commands
Creating Lists:


Example:

 python
Copy
redis_client.rpush('names', 'mark', 'sam', 'nick')
print(redis_client.lrange('names', 0, -1))  # Output: ['mark', 'sam', 'nick']


Other Commands:


lpush(), lpop(), lset(), lrem()


rpush(), rpop()


lrange(), llen(), lpos()


Other advanced commands for managing list elements and popping from multiple lists.



Hash Commands
Setting Hashes:

 python
Copy
redis_client.hset('user-session:123', mapping={'first': 'Sam', 'last': 'Uelle', 'company': 'Redis', 'age': 30})
print(redis_client.hgetall('user-session:123'))
# Output: {'first': 'Sam', 'last': 'Uelle', 'company': 'Redis', 'age': '30'}


Other Hash Commands:


hset(), hget(), hgetall()


hkeys()


hdel(), hexists(), hlen(), hstrlen()



Redis Pipelines
Pipelines:


Helps reduce network overhead by batching commands.


Example:

 python
Copy
r = redis.Redis(decode_responses=True)
pipe = r.pipeline()

for i in range(5):
    pipe.set(f"seat:{i}", f"#{i}")

set_5_result = pipe.execute()
print(set_5_result)  # Output: [True, True, True, True, True]

pipe = r.pipeline()
get_3_result = pipe.get("seat:0").get("seat:3").get("seat:4").execute()
print(get_3_result)  # Output: ['#0', '#3', '#4']



Redis in ML - Simplified Example
Redis in Data Science/ML:


Example of Redis in Machine Learning for feature stores and storing models.


Source: Featureform: Feature Stores Explained



Redis in DS/ML
Further Reading:


Example from MadeWithML: MLops Feature Store




