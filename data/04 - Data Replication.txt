Distributing Data - Benefits
Scalability / High Throughput:


Data volume or Read/Write load exceeds a single machine's capacity.


Fault Tolerance / High Availability:


Application continues functioning even if one or more machines go down.


Latency:


Provide fast performance to users across the world.



Distributed Data - Challenges
Consistency:


Ensuring updates are propagated across the network.


Application Complexity:


Responsibility for reading and writing data often falls to the application in a distributed system.



Vertical Scaling - Shared Memory Architectures
Geographically Centralized Server


Limited fault tolerance through hot-swappable components.



Vertical Scaling - Shared Disk Architectures
Machines connected via fast network


Contention and locking overhead limit scalability, especially with high write volumes.


Effective for Data Warehouse applications with high read volumes.



AWS EC2 Pricing - Oct 2024
Pricing: Over $78,000/month for high-end EC2 instances.



Horizontal Scaling - Shared Nothing Architectures
Each node has its own CPU, memory, and disk


Coordination done via the application layer using conventional networks.


Geographically distributed and uses commodity hardware.



Data - Replication vs. Partitioning
Replication:


Replicas have the same data as the main database.


Partitioning:


Data is divided into subsets, each stored in different locations.



Common Strategies for Replication
Single Leader Model


Multiple Leader Model


Leaderless Model


Distributed databases typically adopt one of these strategies.



Leader-Based Replication
Writes:


All writes go to the leader node.


Leader sends replication info to follower nodes.


Reads:


Clients can read from both leader and followers.



Leader-Based Replication - Common Strategy
Relational DBs:


MySQL, Oracle, SQL Server, PostgreSQL


NoSQL DBs:


MongoDB, RethinkDB, Espresso (LinkedIn)


Messaging Brokers:


Kafka, RabbitMQ



How Replication Info Is Transmitted to Followers
Replication Methods:


Statement-based: Sends INSERT, UPDATE, DELETE operations to the replica.


Write-ahead Log (WAL): Byte-level specific log of changes to the database.


Logical (row-based) Log: Tracks inserted, modified, or deleted rows.


Trigger-based: Uses database triggers to log changes to a separate table.



Synchronous vs Asynchronous Replication
Synchronous Replication:


Leader waits for confirmation from followers.


Asynchronous Replication:


Leader doesn't wait for follower confirmation.



What Happens When the Leader Fails?
Challenges:


How to select a new leader node?


Consensus strategy might depend on which node has the most updates.


Need a mechanism to reconfigure clients to write to the new leader.



Challenges with Leader Failure
Asynchronous Replication Issue:


The new leader may not have all the writes.


Need strategies to recover lost writes or discard them.


Possible conflict when the old leader recovers (split-brain).


Leader failure detection and timeout are tricky.



Replication Lag
Definition:


The delay between a write on the leader and the replication of that write to followers.


Synchronous Replication:


Causes slower writes and more brittleness as the number of followers increases.


Asynchronous Replication:


Maintains availability but sacrifices consistency with eventual consistency.



Read-after-Write Consistency
Scenario Example:


After submitting a comment on Reddit, the comment should appear for the user who submitted it (but not necessarily for other users immediately).



Implementing Read-After-Write Consistency
Method 1:


Always read modifiable data from the leader.


Method 2:


Dynamically read from the leader for recently updated data (e.g., within one minute of the last update).



Challenges with Read-After-Write Consistency
Issue:


Followers are designed for proximity, but now requests may need to be routed to distant leaders for modifiable data.



Monotonic Read Consistency
Monotonic Read Anomalies:


Occur when a user reads values out of order from multiple followers.


Monotonic Read Consistency:


Ensures that once a user reads newer data, subsequent reads will not show older data.



Consistent Prefix Reads
Challenge:


Different partitions may replicate data at different rates, leading to out-of-order reads.


Consistent Prefix Read Guarantee:


Ensures writes appear in the same order as they were made, providing consistency in sequence.





