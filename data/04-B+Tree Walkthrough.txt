B+ Tree: m = 4
Initial Setup:


Insert values: 42, 21, 63, 89.


First node is both a leaf and root node.


Keys represent a set of K:V pairs.


Leaf nodes store keys and data (though data not shown).


Inserting another key will cause the node to split.



B+ Tree: m = 4
Insert: 35


Leaf node splits to accommodate the key 35.


New leaf node created to the right of the existing one.


5/2 values stay in the original node; the remaining values move to the new node.


The smallest value from the new leaf node (42) is copied up to the parent.


A new internal node is created as the parent.



B+ Tree: m = 4
Insert: 10, 27, 96


Insert process starts at the root node.


The keys in the root are searched to determine which child node to descend to.


Example: For 10, since 10 < 42, follow the pointer to the left of 42.


None of these values cause a node to split.



B+ Tree: m = 4
Insert: 30


Start at the root node and descend to the left-most child (curr).


curr is a leaf node, and we insert 30 into it.


Since curr is full, it must be split.


A new node (newNode) is created to the right of curr.


newNode is added to the doubly linked list of leaf nodes.



B+ Tree: m = 4
Insert: 30 Continued


Redistribute the keys between nodes.


The smallest key (27 in this case) from newNode is copied to the parent.


Parent of newNode is the root node, so no further changes needed.



B+ Tree: m = 4
Tree State Observation:


The root node is full.


The next insertion that causes a leaf split will cause the root to split.


This will result in the tree growing one level deeper.



B+ Tree: m = 4
Insert 37 - Step 1


The next step in inserting 37 will cause a further modification in the structure of the tree.



B+ Tree: m = 4
Insert 37 - Step 2


When splitting an internal node, the middle element is moved to the parent (instead of being copied).


In this case, a new internal node is created, which becomes the new root.



