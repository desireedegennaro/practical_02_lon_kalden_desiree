DS 4300 - Document Databases & MongoDB
Instructor: Mark Fontenot, PhD
Institution: Northeastern University
Material from Dr. Rachlin (used with permission)

What is a Document Database?
Non-relational database that stores data as structured documents (usually JSON)

Designed to be simple, flexible, and scalable

What is JSON?
JavaScript Object Notation (lightweight data format)

Human-readable & machine-parsable

Two key structures:

Collection of key-value pairs (e.g., objects, dictionaries)

Ordered lists (e.g., arrays, lists)

JSON Example:
json
Copy
Edit
{
  "name": "Alice",
  "age": 30,
  "languages": ["English", "Spanish"]
}
BSON (Binary JSON)
Binary-encoded JSON used in MongoDB

Supports extended data types (e.g., Date, BinaryData)

Lightweight, traversable, and efficient

XML (eXtensible Markup Language) - JSON Predecessor
Structured like HTML (but with customizable tags)

Used for data exchange & web content formatting

XML-Related Tools:
XPath – Extract elements from XML

XQuery – Query XML data

DTD (Document Type Definition) – Define XML structure

XSLT – Transform XML into other formats (e.g., HTML)

Why Use Document Databases?
Better object persistence in OO programming

Self-describing structure (no need for predefined schema)

Aligns with JSON/XML-based applications

MongoDB Overview
Founded in 2007 (originally named Humongous Database)

Created by DoubleClick engineers after struggling with relational DB scaling

MongoDB Atlas (2016) – Cloud-based DBaaS (Database-as-a-Service)

MongoDB Structure
css
Copy
Edit
Database
 ├── Collection A
 │    ├── Document 1
 │    ├── Document 2
 │    ├── Document 3
 ├── Collection B
 ├── Collection C
No predefined schema (documents in the same collection can differ)

Relational vs. Document Databases
RDBMS	MongoDB (Document DB)
Database	Database
Table/View	Collection
Row	Document
Column	Field
Index	Index
Join	Embedded Document
Foreign Key	Reference
MongoDB Features
Rich Query Support (CRUD operations)

Indexing (Primary & Secondary indexes)

Replication (Replica sets with automatic failover)

Built-in Load Balancing

MongoDB Versions
MongoDB Atlas – Fully managed cloud database

MongoDB Enterprise – Self-managed, subscription-based version

MongoDB Community – Free, open-source, self-managed

Interacting with MongoDB
Tools:
mongosh – MongoDB command-line shell

MongoDB Compass – GUI for MongoDB

DataGrip & 3rd Party Tools – Support for major languages

Python → PyMongo

JavaScript → Mongoose

Running MongoDB in Docker
Create a container

Map host:container port 27017

Set initial username & password

Using MongoDB Compass
GUI for MongoDB interaction

Download & install from MongoDB Compass

Loading MFlix Sample Dataset
Create a database named mflix in Compass

Download & unzip the MFlix dataset

Import JSON files (users, theaters, movies, comments)

MongoDB Commands (mongosh)
Creating a Database & Collection
sh
Copy
Edit
use mflix
db.createCollection("users")
Querying in MongoDB (find() Equivalent to SQL SELECT)
Find All Users
sh
Copy
Edit
db.users.find()
Equivalent SQL:

sql
Copy
Edit
SELECT * FROM users;
Find a Specific User
sh
Copy
Edit
db.users.find({"name": "Davos Seaworth"})
Equivalent SQL:

sql
Copy
Edit
SELECT * FROM users WHERE name = "Davos Seaworth";
Find Movies Rated PG or PG-13
sh
Copy
Edit
db.movies.find({rated: {$in:["PG", "PG-13"]}})
Equivalent SQL:

sql
Copy
Edit
SELECT * FROM movies WHERE rated IN ('PG', 'PG-13');
Find Movies Released in Mexico with IMDB Rating ≥ 7
sh
Copy
Edit
db.movies.find({ 
  "countries": "Mexico",
  "imdb.rating": { $gte: 7 } 
})
Find Movies Released in 2010 with at Least 5 Awards OR Genre "Drama"
sh
Copy
Edit
db.movies.find({
  "year": 2010,
  $or: [ 
    { "awards.wins": { $gte: 5 } }, 
    { "genres": "Drama" } 
  ]
})
Counting Documents
sh
Copy
Edit
db.movies.countDocuments({
  "year": 2010,
  $or: [ 
    { "awards.wins": { $gte: 5 } }, 
    { "genres": "Drama" } 
  ]
})
Equivalent SQL:

sql
Copy
Edit
SELECT COUNT(*) FROM movies 
WHERE year = 2010 
AND (awards_wins >= 5 OR genres = 'Drama');
Projecting Specific Fields (find() with Projection)
sh
Copy
Edit
db.movies.find({
  "year": 2010,
  $or: [ 
    { "awards.wins": { $gte: 5 } }, 
    { "genres": "Drama" } 
  ]
}, {"name": 1, "_id": 0})
1 = return field

0 = do not return field

Using PyMongo in Python
Connecting to MongoDB
python
Copy
Edit
from pymongo import MongoClient

client = MongoClient(
    'mongodb://user_name:pw@localhost:27017'
)
Getting a Database & Collection
python
Copy
Edit
db = client['ds4300']
collection = db['myCollection']
Inserting a Single Document
python
Copy
Edit
post = {
    "author": "Mark",
    "text": "MongoDB is Cool!",
    "tags": ["mongodb", "python"]
}

post_id = collection.insert_one(post).inserted_id
print(post_id)
Counting Documents in a Collection
python
Copy
Edit
count = db.collection.count_documents({})
print(count)
Equivalent SQL:

sql
Copy
Edit
SELECT COUNT(*) FROM collection;