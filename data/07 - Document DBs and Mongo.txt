DS 4300
Document Databases &
MongoDB
Mark Fontenot, PhD
Northeastern University
Some material used with permission from Dr. Rachlin, with thanks!

Document Database
A Document Database is a non-relational database that stores data as structured documents, usually in JSON.

They are designed to be simple, flexible, and scalable.
2

What is JSON?
JSON (JavaScript Object Notation)  
a lightweight data-interchange format 
It is easy for humans to read and write. 
It is easy for machines to parse and generate. 
JSON is built on two structures:
A collection of name/value pairs. In various languages, this is operationalized as an object, record, struct, dictionary, hash table, keyed list, or associative array.
An ordered list of values. In most languages, this is operationalized as an array, vector, list, or sequence.
These are two universal data structures  supported by virtually all modern programming languages
Thus, JSON makes a great data interchange format. 
3

JSON Syntax
4
https://www.json.org/json-en.html

Binary JSON? BSON
BSON → Binary JSON
binary-encoded serialization of a JSON-like document structure
supports extended types not part of basic JSON (e.g. Date, BinaryData, etc)
Lightweight - keep space overhead to a minimum
Traversable - designed to be easily traversed, which is vitally important to a document DB
Efficient - encoding and decoding must be efficient
Supported by many modern programming languages
5

XML (eXtensible Markup Language)
Precursor to JSON as data exchange format
XML + CSS → web pages that separated content and formatting
Structurally similar to HTML, but tag set is extensible
6

XML-Related Tools/Technologies
Xpath - a syntax for retrieving specific elements from an XML doc
Xquery - a query language for interrogating XML documents; the SQL of XML
DTD - Document Type Definition - a language for describing the allowed structure of an XML document
XSLT - eXtensible Stylesheet Language Transformation - tool to transform XML into other formats, including non-XML formats such as HTML.
7

Why Document Databases?
Document databases address the impedance mismatch problem between object persistence in OO systems and how relational DBs structure data.
OO Programming → Inheritance and Composition of types.  
How do we save a complex object to a relational database? We basically have to deconstruct it. 
The structure of a document is self-describing.
They are well-aligned with apps that use JSON/XML as a transport layer
8

MongoDB
9

MongoDB
Started in 2007 after Doubleclick was acquired by Google, and 3 of its veterans realized the limitations of relational databases for serving > 400,000 ads per second
MongoDB was short for Humongous Database
MongoDB Atlas released in 2016 → documentdb as a service
10
https://www.mongodb.com/company/our-story

MongoDB Structure
11
Database
Collection A
Collection B
Collection C
Document 1
Document 2
Document 3
Document 1
Document 2
Document 3
Document 1
Document 2
Document 3

MongoDB Documents
No predefined schema for documents is needed
Every document in a collection could have different data/schema
12

Relational vs Mongo/Document DB
13
RDBMS
MongoDB
Database
Database
Table/View
Collection
Row
Document
Column
Field
Index
Index
Join
Embedded Document
Foreign Key
Reference

MongoDB Features
Rich Query Support - robust support for all CRUD ops
Indexing - supports primary and secondary indices on document fields
Replication - supports replica sets with automatic failover
Load balancing built in 
14

MongoDB Versions
MongoDB Atlas
Fully managed MongoDB service in the cloud (DBaaS)
MongoDB Enterprise
Subscription-based, self-managed version of MongoDB
MongoDB Community
source-available, free-to-use, self-managed
15

Interacting with MongoDB
mongosh → MongoDB Shell
CLI tool for interacting with a MongoDB instance
MongoDB Compass
free, open-source GUI to work with a MongoDB database
DataGrip and other 3rd Party Tools
Every major language has a library to interface with MongoDB
PyMongo (Python), Mongoose (JavaScript/node), … 
16

Mongodb Community Edition in Docker
Create a container
Map host:container port 27017
Give initial username and password for superuser
17
E
D

MongoDB Compass
GUI Tool for interacting with MongoDB instance
Download and install from > here <.


18

Load MFlix Sample Data Set
In Compass, create a new Database named mflix
Download mflix sample dataset  and unzip it
Import JSON files for users, theaters, movies, and comments into new collections in the mflix database
19

Creating a Database and Collection
20
mflix
users
To Create a new DB:
To Create a new Collection:

mongosh - Mongo Shell
find(...) is like SELECT
21
collection.find({ ____ }, { ____ })
filters             projections

mongosh - find()
SELECT * FROM users;
22
use mflix

db.users.find()

mongosh - find()
SELECT *FROM usersWHERE name = “Davos Seaworth”;
23
db.users.find({"name": "Davos Seaworth"})
filter        

mongosh - find()
SELECT * FROM movies WHERE rated in ("PG", "PG-13")
24
 db.movies.find({rated: {$in:[ "PG", "PG-13" ]}})

mongosh - find()
Return movies which were released in Mexico and have an IMDB rating of at least 7
25
  db.movies.find( { 
"countries": "Mexico",
"imdb.rating": { $gte: 7 } 
  } )

mongosh - find()
Return movies from the movies collection which were released in 2010 and either won at least 5 awards or have a genre of Drama
26
   db.movies.find( {
      “year”: 2010,
      $or: [ 
  { "awards.wins": { $gte: 5 } }, 
  { “genres”: "Drama" } 
   ]
   })


Comparison Operators
27

mongosh - countDocuments()
How many movies from the movies collection were released in 2010 and either won at least 5 awards or have a genre of Drama
28
   db.movies.countDocuments( {
      “year”: 2010,
      $or: [ 
  { "awards.wins": { $gte: 5 } }, 
  { “genres”: "Drama" } 
   ]
   })


mongosh - project
Return the names of all movies from the movies collection that were released in 2010 and either won at least 5 awards or have a genre of Drama
29
   db.movies.countDocuments( {
      “year”: 2010,
      $or: [ 
  { "awards.wins": { $gte: 5 } }, 
  { “genres”: "Drama" } 
   ]
   }, {“name”: 1, “_id”: 0} )

1 = return; 0 = don’t return

PyMongo
30

PyMongo
PyMongo is a Python library for interfacing with MongoDB instances
31
from pymongo import MongoClient
client = MongoClient(
‘mongodb://user_name:pw@localhost:27017’
)

Getting a Database and Collection
32
from pymongo import MongoClient
client = MongoClient(
‘mongodb://user_name:pw@localhost:27017’
)

db = client[‘ds4300’]
collection = db[‘myCollection’]

Inserting a Single Document
33
db = client[‘ds4300’]
collection = db[‘myCollection’]

post = {
	“author”: “Mark”,
	“text”: “MongoDB is Cool!”,
	“tags”: [“mongodb”, “python”]
}

post_id = collection.insert_one(post).inserted_id
print(post_id)

Count Documents in Collection
SELECT count(*) FROM collection
34
demodb.collection.count_documents({})

??
35
