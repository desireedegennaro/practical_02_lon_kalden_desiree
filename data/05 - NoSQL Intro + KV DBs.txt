Distributed DBs and ACID - Pessimistic Concurrency
ACID Transactions:


Focus on "data safety."


Pessimistic concurrency: Assumes if something can go wrong, it will.


Uses locks (read and write) to prevent conflicts.


Write lock analogy: Borrowing a book from a library—if you have it, no one else can.



Optimistic Concurrency
No Locks:


Assumes conflicts are unlikely.


Adds last update timestamp/version number to tables to check changes during a transaction.


Low Conflict Systems:


Example: Backups, analytical databases.


High concurrency, can handle conflicts by rolling back and retrying.


High Conflict Systems:


More efficient to use pessimistic model (locking), as conflicts require costly rollbacks.



NoSQL
Meaning of NoSQL:


First used in 1998 by Carlo Strozzi to describe a relational DB without SQL.


More modern meaning: "Not Only SQL."


Initially developed for handling unstructured web-based data.



CAP Theorem Review
CAP Theorem:


You can have 2 of the following, but not all 3:


Consistency: Every user sees identical data at any given time.


Availability: Database remains operational during failure.


Partition Tolerance: Database maintains operation despite network partitions.



CAP Theorem (Continued)
Combination of CAP:


Consistency + Availability: Always latest data, but may not handle network partitions.


Consistency + Partition Tolerance: Responds with latest data, or drops data if it cannot guarantee consistency.


Availability + Partition Tolerance: Responds based on available data, may not be the latest.



ACID Alternative for Distributed Systems - BASE
BASE (Basically Available, Soft State, Eventual Consistency):


Basically Available: Guarantees availability, but responses can be unreliable or inconsistent.


Soft State: State changes over time, possibly without input.


Eventual Consistency: System becomes consistent over time as all replicas converge.



Categories of NoSQL DBs - Review
Key-Value Databases as the first type to be explored.



Key-Value Stores
Key-Value Model:


Simple data model: Key = Value.


Designed Around:


Simplicity: Easy to use for CRUD operations.


Speed: Typically deployed as in-memory DB with O(1) lookup.


Scalability: Horizontal scaling is simple. Often uses eventual consistency in distributed systems.



KV DB Use Cases
Use Cases:


EDA/Experimentation Results Store: Store intermediate results, experiment results without affecting the production DB.


Feature Store: Store frequently accessed features for low-latency retrieval in model training.


Model Monitoring: Track model performance metrics, e.g., real-time inferencing.



KV SWE Use Cases
Use Cases for Key-Value Stores:


Storing Session Information: Fast storage and retrieval using single GET/PUT.


User Profiles & Preferences: Store user settings for quick access.


Shopping Cart Data: Data tied to user, accessible across browsers and sessions.


Caching Layer: Used in front of disk-based databases for speed.



Redis DB
Redis Overview:


Open-source, in-memory database, often called a data structure store.


Primarily a KV store, but also supports other models (e.g., Graph, Spatial, Full Text Search, Time Series).


In-Memory Database:


Supports durability by saving snapshots to disk or using append-only logs for journaling.



Redis Data Types
Data Types:


Keys are usually strings but can be any binary sequence.


Values can be:


Strings, Lists (linked lists), Sets (unique elements), Sorted Sets, Hashes (field-value pairs), Geospatial data.



Setting Up Redis in Docker
Docker Setup:


Search for Redis in Docker Desktop, pull and run the latest image.


Expose port 6379 for external connections (not recommended for production environments).



Connecting Redis with DataGrip
Setup DataGrip:


File > New > Data Source > Redis.


Ensure port is set to 6379 and test the connection.



Redis Database and Interaction
Default Databases: 16 databases numbered from 0 to 15.


Interaction: Use Redis commands to set/get key-value pairs; libraries available for multiple programming languages.



Redis Data Types - Strings
String Data Type:


Sequence of bytes, could be text, binary arrays, or serialized objects.


Use Cases:


Caching frequently accessed data, managing config/settings, tracking page views.



Basic Redis Commands
Commands:


SET /path/to/resource 0 – Set key-value pair.


GET /path/to/resource – Retrieve value.


DEL user:1 – Delete key.


INCR someValue – Increment value by 1.



Redis Hash Type
Hash Data Type:


Maps a key to a collection of field-value pairs.


Use Cases:


Session information management, user/event tracking, and active session tracking.



Redis List Type
List Data Type:


Linked lists of string values.


Use Cases:


Implementing queues and stacks, logging systems, social media streams, batch processing.



Linked Lists in Redis
Linked List Operations:


O(1) for insertion at the front or end.


Queue Operations: LPUSH, RPOP.


Stack Operations: LPUSH, LPOP.



Redis Set Type
Set Data Type:


Unordered collection of unique strings.


Use Cases:


Track unique items, manage access control lists, and represent social network relationships.


Supports Set Operations: SINTER, SDIFF, SADD, SREM.




