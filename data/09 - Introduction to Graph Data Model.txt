DS 4300 - Introduction to the Graph Data Model
Instructor: Mark Fontenot, PhD
Institution: Northeastern University
Reference: Graph Algorithms - Practical Examples in Apache Spark and Neo4j by Needham and Hodler (O’Reilly Press, 2019)

What is a Graph Database?
Data model based on graphs (nodes + edges)

Nodes represent entities

Edges represent relationships between nodes

Each node & edge has unique identifiers

Both nodes and edges can store properties (e.g., name, occupation)

Supports graph-oriented queries, such as:

Traversals

Shortest path

Many other graph operations

Where Do Graphs Show Up?
Social Networks

Instagram, Facebook

Modeling social interactions in psychology & sociology

The Web

Web pages = nodes

Hyperlinks = edges

Chemical & Biological Data

Systems biology, genetics

Chemical interaction relationships

Basics of Graphs and Graph Theory
What is a Graph?
Labeled Property Graph

Nodes (vertices) – Represent objects/entities

Relationships (edges) – Connect nodes

Labels – Group nodes (e.g., Person, Car)

Properties – Key-value attributes for nodes & edges

Rules:

Nodes without edges are allowed

Edges must always connect two nodes

Example Graph
Labels:

Person, Car

Relationship Types:

Drives, Owns, Lives_with, Married_to

Paths in Graphs
Path: Ordered sequence of nodes connected by edges with no repetitions

Example of a Valid Path:

Copy
Edit
1 → 2 → 6 → 5
Invalid Path (Repeats a Node):

Copy
Edit
1 → 2 → 6 → 2 → 3
Flavors of Graphs
Graph Type	Description
Connected vs. Disconnected	A graph is connected if there is a path between every node. Otherwise, it's disconnected.
Weighted vs. Unweighted	Weighted graphs have numerical values on edges (important for algorithms). Unweighted graphs do not.
Directed vs. Undirected	Directed edges have a start & end node. Undirected edges do not.
Acyclic vs. Cyclic	Acyclic graphs have no cycles (e.g., trees). Cyclic graphs contain cycles.
Sparse vs. Dense	Sparse graphs have few edges relative to nodes. Dense graphs have many edges.
Graph Algorithms - Pathfinding
Pathfinding: Finding the shortest path between two nodes (if one exists)

"Shortest" can mean fewest edges or lowest weight

Other Pathfinding Algorithms:

Minimum Spanning Tree

Cycle Detection

Max/Min Flow

Breadth-First Search (BFS) vs. Depth-First Search (DFS)
BFS: Explores neighbors level by level (good for shortest path)

DFS: Explores deepest path first (good for traversing the entire graph)

Graph Algorithms - Centrality & Community Detection
Centrality
Determines important nodes in a network

Example: Identifying influencers in a social network

Community Detection
Evaluates clustering or partitioning of nodes

Measures how tightly groups of nodes form

Famous Graph Algorithms
Algorithm	Purpose
Dijkstra’s Algorithm	Finds single-source shortest paths in positively weighted graphs
A Algorithm*	Similar to Dijkstra's but uses a heuristic to guide traversal
PageRank	Measures node importance based on incoming edges (Google’s ranking algorithm)
Neo4j - A Graph Database System
Supports both transactional & analytical processing

NoSQL database (schema-optional)

Various indexing methods

ACID-compliant

Distributed computing support

Similar to:

Microsoft CosmosDB

Amazon Neptune

