Benefits of the Relational Model
Standard Data Model & Query Language


ACID Compliance:


Atomicity


Consistency


Isolation


Durability


Works well with highly structured data.


Can handle large amounts of data.


Well understood with extensive tooling and experience.



Relational Database Performance
Efficiency Enhancements in RDBMS:


Indexing


Direct control over storage


Column-oriented vs. row-oriented storage


Query optimization


Caching and prefetching


Materialized views


Precompiled stored procedures


Data replication and partitioning



Transaction Processing
Transaction: A sequence of one or more CRUD operations performed as a single logical unit of work.


COMMIT: Successful completion of all operations.


ROLLBACK/ABORT: Failure, undoing all operations.


Benefits:


Ensures data integrity.


Provides error recovery.


Offers concurrency control.


Guarantees reliable data storage.


Simplifies error handling.



ACID Properties
Atomicity: Transaction is treated as an atomic unit, either fully executed or not executed at all.


Consistency: A transaction takes the database from one consistent state to another, where all data meets integrity constraints.


Isolation: Transactions don’t affect each other:


Dirty Read: Transaction reads uncommitted data from another transaction.


Non-repeatable Read: Data is changed by another transaction before being read again.


Phantom Reads: Data is added or deleted by another transaction affecting the result set.



Examples of Isolation Issues
Dirty Read: Transaction T1 reads data that has been modified by T2 but not committed yet.


Non-repeatable Read: Transaction T1 reads data and then reads it again, but the data has been changed and committed by T2 in between.


Phantom Read: Transaction T1 operates on a set of data that is modified (rows added or deleted) by T2.



Example Transaction - Transfer $$
Transaction Setup:


Procedure: Transfer funds from one account to another.


Includes checks for sufficient funds, updates balances, and records the transaction.


Steps:


Debit sender’s account.


Credit receiver’s account.


If insufficient funds, roll back the transaction and return an error message.


If successful, log the transaction and commit the changes.



Durability (ACID)
Once a transaction is committed, the changes are permanent, even if a system failure occurs.


Key Point: Committed transactions are preserved.



Challenges with Relational Databases
Schema Evolution: Schemas change over time, which can be difficult in relational models.


ACID Compliance Overhead: Not all applications require full ACID compliance.


Expensive Joins: Complex queries with many joins can be inefficient.


Semi-structured or Unstructured Data: Data like JSON, XML, etc., doesn't fit neatly into relational schemas.


Horizontal Scaling Challenges: Scaling relational databases across multiple machines can be difficult.



Scalability: Vertical vs. Horizontal
Vertical Scaling (Scaling Up): Increase the power of a single system.


Easier to implement but has financial and practical limits.


Horizontal Scaling (Scaling Out): Use multiple systems (distributed computing).


Modern systems make horizontal scaling less problematic.



Distributed Data Systems
Definition: A distributed system consists of independent computers that work together and appear as a single system to users.


Characteristics:


Computers operate concurrently.


Fail independently.


No shared global clock.



Distributed Storage Systems
Data Replication: Data is stored on multiple nodes for redundancy.


Typically, each block of data is replicated on N nodes.


Types of Distributed Databases:


Relational (e.g., MySQL, PostgreSQL with replication/sharding).


Non-relational (NoSQL systems).


Challenge: Network partitioning is inevitable, so systems need to be partition-tolerant.



The CAP Theorem
Theorem Explanation: A distributed data store can provide at most two out of the following three guarantees:


Consistency: Every read receives the most recent write.


Availability: Every request gets a response (but not necessarily the most recent data).


Partition Tolerance: The system can operate despite network failures.



CAP Theorem - Database View
Consistency + Availability: The system always responds with the latest data and ensures every request gets a response, but may not handle network failures.


Consistency + Partition Tolerance: The system ensures data consistency, but may drop requests if the network is unavailable.


Availability + Partition Tolerance: The system always responds, but data may not be the latest.



CAP in Reality
Core Insight: In distributed systems, if faults are not limited, you cannot guarantee consistency while handling every request.


Interpretation: You must give up one of the following: consistency, availability, or tolerance to failure.





