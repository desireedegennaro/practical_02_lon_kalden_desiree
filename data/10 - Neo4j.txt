DS 4300 - Neo4j
Instructor: Mark Fontenot, PhD
Institution: Northeastern University
Reference: Graph Algorithms - Practical Examples in Apache Spark and Neo4j by Needham and Hodler (O’Reilly Press, 2019)

Neo4j Overview
Graph Database System for transactional & analytical processing

Part of the NoSQL database family

Schema-optional (one can be imposed)

Supports various types of indexing

ACID-compliant

Distributed computing support

Similar databases: Microsoft CosmosDB, Amazon Neptune

Neo4j Query Language & Plugins
Cypher
Neo4j’s graph query language (introduced in 2011)

SQL-equivalent for graph databases

Uses visual pattern matching for relationships:

cypher
Copy
Edit
(nodes)-[:CONNECT_TO]->(otherNodes)
APOC Plugin (Awesome Procedures on Cypher)
Adds hundreds of procedures & functions

Graph Data Science Plugin
Efficient graph algorithm implementations

Neo4j in Docker Compose
Docker Compose Overview
Multi-container management

Uses declarative YAML (docker-compose.yaml) for setup

Defines services, volumes, networks

Single command can start, stop, or scale services

Ensures identical environments across systems

Example docker-compose.yaml for Neo4j
yaml
Copy
Edit
services:
  neo4j:
    container_name: neo4j
    image: neo4j:latest
    ports:
      - 7474:7474
      - 7687:7687
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
    volumes:
      - ./neo4j_db/data:/data
      - ./neo4j_db/logs:/logs
      - ./neo4j_db/import:/var/lib/neo4j/import
      - ./neo4j_db/plugins:/plugins
⚠ Never store secrets in docker-compose.yaml. Use .env files instead.

Environment Variables with .env Files
Store environment-specific variables separately

Common files:

.env.local

.env.dev

.env.prod

Example .env file:

env
Copy
Edit
NEO4J_PASSWORD=abc123!!!
Docker Compose Commands
Command	Description
docker --version	Check if Docker CLI is installed
docker compose up	Start services (foreground)
docker compose up -d	Start services (detached mode)
docker compose down	Stop and remove containers
docker compose start	Start stopped services
docker compose stop	Stop running services
docker compose build	Build/rebuild containers
docker compose build --no-cache	Build without using cache
Neo4j Browser
Open in browser: localhost:7474

Login with credentials from .env file

Creating Data in Neo4j
Inserting Nodes
cypher
Copy
Edit
CREATE (:User {name: "Alice", birthPlace: "Paris"})
CREATE (:User {name: "Bob", birthPlace: "London"})
CREATE (:User {name: "Carol", birthPlace: "London"})
CREATE (:User {name: "Dave", birthPlace: "London"})
CREATE (:User {name: "Eve", birthPlace: "Rome"})
Creating Relationships
cypher
Copy
Edit
MATCH (alice:User {name: "Alice"})
MATCH (bob:User {name: "Bob"})
CREATE (alice)-[:KNOWS {since: "2022-12-01"}]->(bob)
Note: Relationships are directed in Neo4j.

Querying Data
Find Users Born in London
cypher
Copy
Edit
MATCH (usr:User {birthPlace: "London"})
RETURN usr.name, usr.birthPlace
Importing Data
Download & Prepare Dataset
Clone repo:

sh
Copy
Edit
git clone https://github.com/PacktPublishing/Graph-Data-Science-with-Neo4j
Unzip netflix.zip (found in Chapter02/data/)

Move netflix_titles.csv to:

bash
Copy
Edit
neo4j_db/neo4j_db/import
Basic Data Importing
cypher
Copy
Edit
LOAD CSV WITH HEADERS  
FROM 'file:///netflix_titles.csv' AS line  
CREATE (:Movie {  
    id: line.show_id,  
    title: line.title,  
    releaseYear: line.release_year  
})
Loading CSVs in Neo4j - General Syntax
cypher
Copy
Edit
LOAD CSV
[WITH HEADERS]
FROM 'file:///file_in_import_folder.csv'
AS line
[FIELDTERMINATOR ',']
// Process 'line' as needed
Importing Data with Directors
Initial Import (Duplicates Allowed)
cypher
Copy
Edit
LOAD CSV WITH HEADERS  
FROM 'file:///netflix_titles.csv' AS line  
WITH split(line.director, ",") AS directors_list  
UNWIND directors_list AS director_name  
CREATE (:Person {name: trim(director_name)})
⚠ Problem: This creates duplicate nodes if a director has multiple movies.

Corrected Import (Avoiding Duplicates)
cypher
Copy
Edit
MATCH (p:Person) DELETE p

LOAD CSV WITH HEADERS  
FROM 'file:///netflix_titles.csv' AS line  
WITH split(line.director, ",") AS directors_list  
UNWIND directors_list AS director_name  
MERGE (:Person {name: director_name})
Creating Relationships
Link Directors to Movies
cypher
Copy
Edit
LOAD CSV WITH HEADERS  
FROM 'file:///netflix_titles.csv' AS line  
MATCH (m:Movie {id: line.show_id})  
WITH m, split(line.director, ",") AS directors_list  
UNWIND directors_list AS director_name  
MATCH (p:Person {name: director_name})  
CREATE (p)-[:DIRECTED]->(m)
Validating Data
Check for a Specific Movie & Its Director
cypher
Copy
Edit
MATCH (m:Movie {title: "Ray"})<-[:DIRECTED]-(p:Person)
RETURN m, p

