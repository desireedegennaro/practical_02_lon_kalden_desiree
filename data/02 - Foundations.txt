Searching in Databases
Definition: Searching is one of the most common operations performed by a database system.


SQL Query: The SELECT statement is arguably the most versatile and complex SQL operation.



Searching Algorithm: Linear Search
Baseline for Efficiency: Linear Search is often used as a baseline for efficiency.


How it works:


Start at the beginning of a list and proceed element by element until:


You find what you’re looking for.


You reach the last element and haven’t found it.



Key Terms in Searching
Record: A collection of values for attributes of a single entity (i.e., a row in a table).


Collection: A set of records of the same entity type (i.e., a table).


Search Key: A value (or set of values) from an entity's attributes used for searching.



Types of Record Storage
Contiguously Allocated List:


All records are stored as a single “chunk” of memory.


Memory allocation is contiguous.


Linked List:


Each record takes up memory for the data plus additional space for memory addresses (used to link records together).



Contiguous vs Linked List Storage
Contiguously Allocated (Array):


Faster for random access.


Slow for insertions, especially not at the end of the list.


Linked List:


Slower for random access (due to traversal of the list).


Faster for insertions anywhere in the list.



Insertion Example:
Inserting after the 2nd record in an Array:


Requires moving all records after the insertion point to make space, which can be slow.


Inserting after the 2nd record in a Linked List:


Fast insertion without moving other records since only the links need to be adjusted.



Performance Observations:
Arrays:


Fast for random access.


Slow for insertions except at the end.


Linked Lists:


Slow for random access (linear traversal).


Fast for insertions at any point in the list.



Binary Search
Input: A sorted array of values and a target value.


Output: The index of the target value or an indication that the target wasn't found.


Binary Search Algorithm (Pseudocode):
python
Copy
def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1

Example of Binary Search Execution:


Array: [A, C, G, M, P, R, Z]


Target: A


Midpoint is calculated, and the search proceeds based on comparisons.



Time Complexity:
Linear Search:


Best case: O(1) - found at the first element.


Worst case: O(n) - not found, requiring a scan through all elements.


Binary Search:


Best case: O(1) - found at the midpoint.


Worst case: O(log n) - log2 of the array size comparisons.



Database Searching Challenges:
Scenario: If data is stored by ID value, searches for specific ID values are fast.


Challenge: Searching for non-ID attributes (like specialVal) requires a linear scan, which is inefficient.


Issue with Storage: Storing data in a way that’s sorted by both ID and specialVal would require duplicate data, leading to space inefficiency.



External Data Structures for Efficient Searching:
Array of Tuples (specialVal, rowNumber):


Pro: Binary search can be applied for fast searching by specialVal.


Con: Insertions are slow as the array must remain sorted.


Linked List of Tuples (specialVal, rowNumber):


Pro: Insertions are fast, as linked lists are flexible with insertions.


Con: Searching by specialVal requires a linear scan.



Optimal Solution: Binary Search Tree (BST)
Binary Search Tree (BST):


A binary tree where each node’s left subtree contains smaller values, and the right subtree contains larger values.


It offers efficient search and insertion operations compared to arrays and linked lists.

